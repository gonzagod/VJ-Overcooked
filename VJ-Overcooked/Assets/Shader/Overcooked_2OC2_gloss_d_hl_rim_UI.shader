Shader "Overcooked_2/OC2_gloss_d_hl_rim_UI" {
	Properties {
		_DiffuseMap ("Diffuse Map", 2D) = "white" {}
		_MaskColor ("Mask Color", Vector) = (0.5019608,0.5019608,0.5019608,1)
		_Metallic ("Metallic", Float) = 0.04
		_Roughness ("Roughness", Float) = 0.5
		_Brightness ("Brightness", Range(0, 1)) = 0
		_highlight_colour ("highlight_colour", Vector) = (0.9117647,0.8719588,0.7843858,1)
		_RimPower ("Rim Power", Float) = 1
		_RimIntensity ("Rim Intensity", Float) = 1.3
		_AmbientLighting ("Ambient Lighting", Vector) = (0,0,0,0)
	}
	SubShader {
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDBASE" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 29132
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_2_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unused_3_1;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD9.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    vs_TEXCOORD9.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xyz = vec3(u_xlat18) * _LightColor0.xyz;
					    u_xlat4.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat3.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * _LightColor0.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat3.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat3 = texture(_ShadowMapTexture, u_xlat3.xy);
					    u_xlat3.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						float _Brightness;
						vec4 _highlight_colour;
						vec4 unused_0_9;
						vec4 _AmbientLighting;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat14;
					float u_xlat15;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat19 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * _WorldSpaceLightPos0.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat19) + u_xlat2.xyz;
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.xyz = vec3(u_xlat19) * u_xlat4.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat5.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat5.xyz, u_xlat2.xyz);
					    u_xlat8 = dot(u_xlat5.xyz, u_xlat3.xyz);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat14 = (-_Roughness) + 1.0;
					    u_xlat3.x = u_xlat14 * u_xlat14;
					    u_xlat9 = u_xlat3.x * u_xlat3.x;
					    u_xlat15 = u_xlat19 * u_xlat9 + (-u_xlat19);
					    u_xlat19 = u_xlat15 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat9 = u_xlat9 * 0.318309873;
					    u_xlat19 = u_xlat9 / u_xlat19;
					    u_xlat9 = (-u_xlat14) * u_xlat14 + 1.0;
					    u_xlat15 = abs(u_xlat8) * u_xlat9 + u_xlat3.x;
					    u_xlat21 = min(u_xlat2.x, 1.0);
					    u_xlat3.x = u_xlat21 * u_xlat9 + u_xlat3.x;
					    u_xlat3.x = abs(u_xlat8) * u_xlat3.x;
					    u_xlat3.x = u_xlat21 * u_xlat15 + u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + 9.99999975e-06;
					    u_xlat3.x = 0.5 / u_xlat3.x;
					    u_xlat19 = u_xlat19 * u_xlat3.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat21 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat3.x + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat5.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat20) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 + u_xlat20;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat14 + -0.5;
					    u_xlat19 = (-u_xlat2.x) + 1.0;
					    u_xlat14 = u_xlat19 * u_xlat19;
					    u_xlat14 = u_xlat14 * u_xlat14;
					    u_xlat19 = u_xlat19 * u_xlat14;
					    u_xlat19 = u_xlat18 * u_xlat19 + 1.0;
					    u_xlat14 = -abs(u_xlat8) + 1.0;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = (-u_xlat8) + 1.0;
					    u_xlat8 = log2(u_xlat8);
					    u_xlat8 = u_xlat8 * 0.899999976;
					    u_xlat8 = exp2(u_xlat8);
					    u_xlat8 = u_xlat8 * _Brightness;
					    u_xlat20 = u_xlat14 * u_xlat14;
					    u_xlat20 = u_xlat20 * u_xlat20;
					    u_xlat14 = u_xlat14 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat14 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat2.x * u_xlat18;
					    u_xlat2.xzw = vec3(u_xlat18) * u_xlat3.xyz + _AmbientLighting.xyz;
					    u_xlat0.xyz = u_xlat2.xzw * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = vec3(u_xlat8) * _highlight_colour.xyz + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD_DELTA"
			Tags { "LIGHTMODE" = "FORWARDADD" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			GpuProgramID 66664
			Program "vp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat1.zw;
					    vs_TEXCOORD8.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat1.zw;
					    vs_TEXCOORD8.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat1.zw;
					    vs_TEXCOORD8.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat1.zw;
					    vs_TEXCOORD8.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    vs_TEXCOORD6.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD7 = unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD3 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat0.zw;
					    vs_TEXCOORD8.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityShadows {
						vec4 unused_0_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_0_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat2.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat2.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat2.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat2.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    u_xlat0.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat0.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx;
					    u_xlat0.xyz = u_xlat0.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * in_TANGENT0.www;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    vs_TEXCOORD6.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD8.zw = u_xlat1.zw;
					    vs_TEXCOORD8.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[8];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_1_2[14];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec4 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    u_xlat1.xy = u_xlat0.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat1.xy;
					    vs_TEXCOORD7.xy = unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * unity_WorldToShadow[1 / 4][1 % 4];
					    u_xlat1 = unity_WorldToShadow[0 / 4][0 % 4] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToShadow[2 / 4][2 % 4] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD8 = unity_WorldToShadow[3 / 4][3 % 4] * u_xlat0.wwww + u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 unity_WorldToLight;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[46];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TANGENT0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					in  vec4 in_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_COLOR0;
					out vec3 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0 = unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = in_TEXCOORD1.xy;
					    vs_TEXCOORD2.xy = in_TEXCOORD2.xy;
					    vs_TEXCOORD3 = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    vs_TEXCOORD5.xyz = u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
					    u_xlat1.xyz = u_xlat1.yzx * u_xlat2.zxy + (-u_xlat3.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * in_TANGENT0.www;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    vs_TEXCOORD6.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD7.xyz = unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat1.xyz;
					    vs_TEXCOORD8.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8.x * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8.x = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8.x / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat8.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat12.xy);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8.x * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8.x = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8.x / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat8.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat12.xy);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_COMBINED" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8.x * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8.x = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8.x / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat8.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat12.xy);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8.x * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8.x = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8.x / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat8.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat12.xy);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat19 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTexture0, vec2(u_xlat19));
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bvec3 u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat10;
					bool u_xlatb10;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat6.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat17 = max(u_xlat17, 0.0);
					    u_xlat3.x = min(u_xlat17, 1.0);
					    u_xlat8 = (-_Roughness) + 1.0;
					    u_xlat13 = (-u_xlat8) * u_xlat8 + 1.0;
					    u_xlat18 = u_xlat8 * u_xlat8;
					    u_xlat4.x = u_xlat3.x * u_xlat13 + u_xlat18;
					    u_xlat13 = abs(u_xlat1.x) * u_xlat13 + u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat13 = u_xlat3.x * u_xlat13 + u_xlat4.x;
					    u_xlat13 = u_xlat13 + 9.99999975e-06;
					    u_xlat13 = 0.5 / u_xlat13;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = u_xlat15 * u_xlat18 + (-u_xlat15);
					    u_xlat5.x = u_xlat5.x * u_xlat15 + 1.0;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x + 1.00000001e-07;
					    u_xlat10.x = u_xlat18 * 0.318309873;
					    u_xlat5.x = u_xlat10.x / u_xlat5.x;
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat5.x = u_xlat5.x * 3.14159274;
					    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat5.x = u_xlat3.x * u_xlat5.x;
					    u_xlatb6.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat10.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat6.x = (u_xlatb6.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat6.y = (u_xlatb6.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat6.z = (u_xlatb6.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat6.xyz = clamp(u_xlat6.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat6.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat6.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat6.xyz = u_xlat6.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb10 = u_xlat10.x!=0.0;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat5.x = u_xlat10.x * u_xlat5.x;
					    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;
					    u_xlat3.xzw = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.x = (-u_xlat0.x) + 1.0;
					    u_xlat9 = u_xlat4.x * u_xlat4.x;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat4.x * u_xlat9;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat4.xxx + u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat8 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat17) + 1.0;
					    u_xlat7 = u_xlat2.x * u_xlat2.x;
					    u_xlat7 = u_xlat7 * u_xlat7;
					    u_xlat2.x = u_xlat2.x * u_xlat7;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat17 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat6.xyz + u_xlat5.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat12.xy = u_xlat12.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat12.xy);
					    u_xlatb12 = 0.0<vs_TEXCOORD7.z;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = u_xlat4.w * u_xlat12.x;
					    u_xlat18 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat18));
					    u_xlat12.x = u_xlat12.x * u_xlat4.x;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat4 = texture(_LightTextureB0, u_xlat12.xx);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat3.xyz = u_xlat4.www * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0 = texture(_LightTexture0, u_xlat0.xy);
					    u_xlatb0 = 0.0<vs_TEXCOORD7.z;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat0.x = u_xlat0.w * u_xlat0.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    vec3 txVec0 = vec3(u_xlat6.xy,u_xlat6.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat12 = (-_LightShadowData.x) + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat12 + _LightShadowData.x;
					    u_xlat0.x = u_xlat6.x * u_xlat0.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ShadowMapTexture_TexelSize;
						vec4 unused_0_2[4];
						vec4 _LightColor0;
						vec4 unused_0_4;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_9;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD8.xyz / vs_TEXCOORD8.www;
					    u_xlat1.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + vec2(0.5, 0.5);
					    u_xlat1.xy = floor(u_xlat1.xy);
					    u_xlat0.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.zw + (-u_xlat1.xy);
					    u_xlat13.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);
					    u_xlat2.xy = min(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat2.xy = (-u_xlat2.xy) * u_xlat2.xy + u_xlat13.xy;
					    u_xlat3.y = u_xlat2.x;
					    u_xlat13.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat4 = u_xlat0.xxyy + vec4(0.5, 1.0, 0.5, 1.0);
					    u_xlat2.xz = (-u_xlat13.xy) * u_xlat13.xy + u_xlat4.yw;
					    u_xlat13.xy = u_xlat4.xz * u_xlat4.xz;
					    u_xlat3.z = u_xlat2.x;
					    u_xlat0.xy = u_xlat13.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
					    u_xlat3.x = u_xlat0.x;
					    u_xlat2.x = u_xlat0.y;
					    u_xlat3.w = u_xlat13.x;
					    u_xlat2.w = u_xlat13.y;
					    u_xlat2 = u_xlat2 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat3 = u_xlat3 * vec4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
					    u_xlat4 = u_xlat3.ywyw + u_xlat3.xzxz;
					    u_xlat0.xy = u_xlat3.yw / u_xlat4.zw;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.xy = u_xlat0.xy * _ShadowMapTexture_TexelSize.xx;
					    u_xlat5 = u_xlat2.yyww + u_xlat2.xxzz;
					    u_xlat0.xy = u_xlat2.yw / u_xlat5.yw;
					    u_xlat2 = u_xlat4 * u_xlat5;
					    u_xlat0.xy = u_xlat0.xy + vec2(-1.5, 0.5);
					    u_xlat3.zw = u_xlat0.xy * _ShadowMapTexture_TexelSize.yy;
					    u_xlat4 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xzyz;
					    u_xlat1 = u_xlat1.xyxy * _ShadowMapTexture_TexelSize.xyxy + u_xlat3.xwyw;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat0.z);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    vec3 txVec1 = vec3(u_xlat4.zw,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.x = u_xlat6.x * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat0.x + u_xlat6.x;
					    vec3 txVec2 = vec3(u_xlat1.xy,u_xlat0.z);
					    u_xlat6.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat1.zw,u_xlat0.z);
					    u_xlat12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = u_xlat2.z * u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat2.w * u_xlat12 + u_xlat0.x;
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlatb6 = 0.0<vs_TEXCOORD7.z;
					    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat1.w * u_xlat6.x;
					    u_xlat12 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat12));
					    u_xlat6.x = u_xlat6.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4.x = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4.x) * u_xlat4.x + 1.0;
					    u_xlat16 = u_xlat4.x * u_xlat4.x;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13.x = u_xlat7.x * u_xlat7.x;
					    u_xlat13.x = u_xlat13.x * u_xlat13.x;
					    u_xlat7.x = u_xlat7.x * u_xlat13.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8.x * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8.x = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8.x / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat8.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat8.xy);
					    u_xlat3.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8.x = u_xlat2.x * u_xlat2.x;
					    u_xlat8.x = u_xlat8.x * u_xlat8.x;
					    u_xlat2.x = u_xlat2.x * u_xlat8.x;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					bvec3 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					vec3 u_xlat11;
					float u_xlat17;
					float u_xlat18;
					bool u_xlatb18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					void main()
					{
					    u_xlatb0.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat1.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat1.xyz = (-u_xlat1.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat2 = texture(_DiffuseMap, u_xlat2.xy);
					    u_xlat3.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat3.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = u_xlat2.xyz * _MaskColor.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat3.xyz;
					    u_xlat0.x = (u_xlatb0.x) ? u_xlat1.x : u_xlat3.x;
					    u_xlat0.y = (u_xlatb0.y) ? u_xlat1.y : u_xlat3.y;
					    u_xlat0.z = (u_xlatb0.z) ? u_xlat1.z : u_xlat3.z;
					    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.www * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vs_COLOR0.xyz;
					    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat0.xyz = vec3(_Metallic) * u_xlat0.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb18 = u_xlat18!=0.0;
					    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
					    u_xlat2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat20 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat4.xyz = vec3(u_xlat20) * vs_TEXCOORD4.xyz;
					    u_xlat20 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat3.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = min(u_xlat21, 1.0);
					    u_xlat5 = (-_Roughness) + 1.0;
					    u_xlat11.x = (-u_xlat5) * u_xlat5 + 1.0;
					    u_xlat17 = u_xlat5 * u_xlat5;
					    u_xlat23 = u_xlat22 * u_xlat11.x + u_xlat17;
					    u_xlat11.x = abs(u_xlat20) * u_xlat11.x + u_xlat17;
					    u_xlat17 = u_xlat17 * u_xlat17;
					    u_xlat23 = abs(u_xlat20) * u_xlat23;
					    u_xlat20 = -abs(u_xlat20) + 1.0;
					    u_xlat11.x = u_xlat22 * u_xlat11.x + u_xlat23;
					    u_xlat11.x = u_xlat11.x + 9.99999975e-06;
					    u_xlat11.x = 0.5 / u_xlat11.x;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat19) + u_xlat3.xyz;
					    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
					    u_xlat19 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat8 = u_xlat19 * u_xlat17 + (-u_xlat19);
					    u_xlat19 = u_xlat8 * u_xlat19 + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.00000001e-07;
					    u_xlat8 = u_xlat17 * 0.318309873;
					    u_xlat19 = u_xlat8 / u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat11.x;
					    u_xlat19 = u_xlat19 * 3.14159274;
					    u_xlat19 = max(u_xlat19, 9.99999975e-05);
					    u_xlat19 = sqrt(u_xlat19);
					    u_xlat19 = u_xlat22 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat19 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat8 = (-_LightShadowData.x) + 1.0;
					    u_xlat19 = u_xlat19 * u_xlat8 + _LightShadowData.x;
					    u_xlat3.xyz = vec3(u_xlat19) * _LightColor0.xyz;
					    u_xlat4.xyz = vec3(u_xlat18) * u_xlat3.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat2.x) + 1.0;
					    u_xlat19 = u_xlat18 * u_xlat18;
					    u_xlat19 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat18) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
					    u_xlat18 = u_xlat20 * u_xlat20;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat19 = u_xlat2.x + u_xlat2.x;
					    u_xlat19 = u_xlat2.x * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat5 + -0.5;
					    u_xlat18 = u_xlat19 * u_xlat18 + 1.0;
					    u_xlat2.x = (-u_xlat21) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat19 = u_xlat19 * u_xlat2.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat19;
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlat2.xyz = u_xlat3.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2D _DiffuseMap;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    u_xlat12.xy = vs_TEXCOORD8.xy / vs_TEXCOORD8.ww;
					    u_xlat4 = texture(_ShadowMapTexture, u_xlat12.xy);
					    u_xlat5 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat4.x * u_xlat5.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5.x = u_xlat22 * u_xlat22;
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat22 = u_xlat22 * u_xlat5.x;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[47];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD7;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec4 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bvec3 u_xlatb7;
					float u_xlat8;
					float u_xlat9;
					vec2 u_xlat12;
					bool u_xlatb12;
					float u_xlat15;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat2.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat7.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat20);
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat7.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat3.x = min(u_xlat20, 1.0);
					    u_xlat9 = (-_Roughness) + 1.0;
					    u_xlat15 = (-u_xlat9) * u_xlat9 + 1.0;
					    u_xlat21 = u_xlat9 * u_xlat9;
					    u_xlat4.x = u_xlat3.x * u_xlat15 + u_xlat21;
					    u_xlat15 = abs(u_xlat1.x) * u_xlat15 + u_xlat21;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat4.x = abs(u_xlat1.x) * u_xlat4.x;
					    u_xlat1.x = -abs(u_xlat1.x) + 1.0;
					    u_xlat15 = u_xlat3.x * u_xlat15 + u_xlat4.x;
					    u_xlat15 = u_xlat15 + 9.99999975e-06;
					    u_xlat15 = 0.5 / u_xlat15;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat7.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat6.x = u_xlat18 * u_xlat21 + (-u_xlat18);
					    u_xlat6.x = u_xlat6.x * u_xlat18 + 1.0;
					    u_xlat6.x = u_xlat6.x * u_xlat6.x + 1.00000001e-07;
					    u_xlat12.x = u_xlat21 * 0.318309873;
					    u_xlat6.x = u_xlat12.x / u_xlat6.x;
					    u_xlat6.x = u_xlat6.x * u_xlat15;
					    u_xlat6.x = u_xlat6.x * 3.14159274;
					    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
					    u_xlat6.x = sqrt(u_xlat6.x);
					    u_xlat6.x = u_xlat3.x * u_xlat6.x;
					    u_xlatb7.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.5), _MaskColor.xyzz).xyz;
					    u_xlat2.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat12.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat4 = texture(_DiffuseMap, u_xlat12.xy);
					    u_xlat3.xzw = (-u_xlat4.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xyz = (-u_xlat2.xyz) * u_xlat3.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xzw = u_xlat4.xyz * _MaskColor.xyz;
					    u_xlat3.xzw = u_xlat3.xzw + u_xlat3.xzw;
					    u_xlat7.x = (u_xlatb7.x) ? u_xlat2.x : u_xlat3.x;
					    u_xlat7.y = (u_xlatb7.y) ? u_xlat2.y : u_xlat3.z;
					    u_xlat7.z = (u_xlatb7.z) ? u_xlat2.z : u_xlat3.w;
					    u_xlat7.xyz = clamp(u_xlat7.xyz, 0.0, 1.0);
					    u_xlat2.xyz = (-u_xlat7.xyz) + u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat4.www * u_xlat2.xyz + u_xlat7.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * u_xlat7.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat7.xyz = u_xlat7.xyz * vs_COLOR0.xyz;
					    u_xlat2.xyz = vec3(_Metallic) * u_xlat2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb12 = u_xlat12.x!=0.0;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat6.x = u_xlat12.x * u_xlat6.x;
					    vec3 txVec0 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
					    u_xlat12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat18 = (-_LightShadowData.x) + 1.0;
					    u_xlat12.x = u_xlat12.x * u_xlat18 + _LightShadowData.x;
					    u_xlat4 = texture(_LightTexture0, vs_TEXCOORD7.xy);
					    u_xlat12.x = u_xlat12.x * u_xlat4.w;
					    u_xlat3.xzw = u_xlat12.xxx * _LightColor0.xyz;
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xzw;
					    u_xlat4.xyz = (-u_xlat2.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat22 = (-u_xlat0.x) + 1.0;
					    u_xlat5 = u_xlat22 * u_xlat22;
					    u_xlat5 = u_xlat5 * u_xlat5;
					    u_xlat22 = u_xlat22 * u_xlat5;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat6.xyz * u_xlat2.xyz;
					    u_xlat2.x = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
					    u_xlat2.x = u_xlat1.x * u_xlat1.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat1.x = u_xlat1.x * u_xlat2.x;
					    u_xlat2.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat9 + -0.5;
					    u_xlat1.x = u_xlat0.x * u_xlat1.x + 1.0;
					    u_xlat2.x = (-u_xlat20) + 1.0;
					    u_xlat8 = u_xlat2.x * u_xlat2.x;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat2.x = u_xlat2.x * u_xlat8;
					    u_xlat0.x = u_xlat0.x * u_xlat2.x + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat2.xyz = u_xlat3.xzw * u_xlat0.xxx;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat7.xyz + u_xlat6.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat6));
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat6.xx);
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    vec4 txVec0 = vec4(vs_TEXCOORD8.xyz,u_xlat0.x);
					    u_xlat0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6 + _LightShadowData.x;
					    u_xlat6 = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, vec2(u_xlat6));
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6 = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier00 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier01 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
				SubProgram "d3d11 hw_tier02 " {
					Keywords { "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "LIGHTMAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _MaskColor;
						vec4 _DiffuseMap_ST;
						float _Metallic;
						float _Roughness;
						vec4 unused_0_7;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1;
						vec4 _LightProjectionParams;
						vec4 unused_2_3[45];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unused_3_2;
					};
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler2D _DiffuseMap;
					uniform  samplerCube _ShadowMapTexture;
					uniform  samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec3 vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb2;
					vec3 u_xlat3;
					float u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat6;
					vec2 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat10;
					float u_xlat13;
					float u_xlat16;
					float u_xlat18;
					float u_xlat19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.x = max(abs(vs_TEXCOORD8.y), abs(vs_TEXCOORD8.x));
					    u_xlat0.x = max(u_xlat0.x, abs(vs_TEXCOORD8.z));
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.z);
					    u_xlat0.x = max(u_xlat0.x, 9.99999975e-06);
					    u_xlat0.x = u_xlat0.x * _LightProjectionParams.w;
					    u_xlat0.x = _LightProjectionParams.y / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + (-_LightProjectionParams.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    u_xlat6.xyz = vs_TEXCOORD8.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec3 = vec4(u_xlat6.xyz,u_xlat0.x);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat6.x = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x + _LightShadowData.x;
					    u_xlat6.x = dot(vs_TEXCOORD7.xyz, vs_TEXCOORD7.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat6.xx);
					    u_xlat2 = texture(_LightTexture0, vs_TEXCOORD7.xyz);
					    u_xlat6.x = u_xlat1.x * u_xlat2.w;
					    u_xlat0.x = u_xlat0.x * u_xlat6.x;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat19 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat3.xyz = vec3(u_xlat19) * vs_TEXCOORD4.xyz;
					    u_xlat19 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = _WorldSpaceLightPos0.www * (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat20 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat20 = inversesqrt(u_xlat20);
					    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat20 = max(u_xlat20, 0.0);
					    u_xlat21 = min(u_xlat20, 1.0);
					    u_xlat4 = (-_Roughness) + 1.0;
					    u_xlat10.x = (-u_xlat4) * u_xlat4 + 1.0;
					    u_xlat16 = u_xlat4 * u_xlat4;
					    u_xlat22 = u_xlat21 * u_xlat10.x + u_xlat16;
					    u_xlat10.x = abs(u_xlat19) * u_xlat10.x + u_xlat16;
					    u_xlat16 = u_xlat16 * u_xlat16;
					    u_xlat22 = abs(u_xlat19) * u_xlat22;
					    u_xlat19 = -abs(u_xlat19) + 1.0;
					    u_xlat10.x = u_xlat21 * u_xlat10.x + u_xlat22;
					    u_xlat10.x = u_xlat10.x + 9.99999975e-06;
					    u_xlat10.x = 0.5 / u_xlat10.x;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat7.x = u_xlat18 * u_xlat16 + (-u_xlat18);
					    u_xlat18 = u_xlat7.x * u_xlat18 + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;
					    u_xlat7.x = u_xlat16 * 0.318309873;
					    u_xlat18 = u_xlat7.x / u_xlat18;
					    u_xlat18 = u_xlat18 * u_xlat10.x;
					    u_xlat18 = u_xlat18 * 3.14159274;
					    u_xlat18 = max(u_xlat18, 9.99999975e-05);
					    u_xlat18 = sqrt(u_xlat18);
					    u_xlat18 = u_xlat21 * u_xlat18;
					    u_xlatb2.xyz = lessThan(vec4(0.5, 0.5, 0.5, 0.0), _MaskColor.xyzx).xyz;
					    u_xlat3.xyz = _MaskColor.xyz + vec3(-0.5, -0.5, -0.5);
					    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(2.0, 2.0, 2.0) + vec3(1.0, 1.0, 1.0);
					    u_xlat7.xy = vs_TEXCOORD0.xy * _DiffuseMap_ST.xy + _DiffuseMap_ST.zw;
					    u_xlat5 = texture(_DiffuseMap, u_xlat7.xy);
					    u_xlat10.xyz = (-u_xlat5.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat10.xyz + vec3(1.0, 1.0, 1.0);
					    u_xlat10.xyz = u_xlat5.xyz * _MaskColor.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + u_xlat10.xyz;
					    u_xlat2.x = (u_xlatb2.x) ? u_xlat3.x : u_xlat10.x;
					    u_xlat2.y = (u_xlatb2.y) ? u_xlat3.y : u_xlat10.y;
					    u_xlat2.z = (u_xlatb2.z) ? u_xlat3.z : u_xlat10.z;
					    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
					    u_xlat3.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.www * u_xlat3.xyz + u_xlat2.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat2.xyz = u_xlat2.xyz * vs_COLOR0.xyz;
					    u_xlat3.xyz = vec3(_Metallic) * u_xlat3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb7 = u_xlat7.x!=0.0;
					    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat10.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat5.xyz = (-u_xlat3.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat18 = (-u_xlat1.x) + 1.0;
					    u_xlat7.x = u_xlat18 * u_xlat18;
					    u_xlat7.x = u_xlat7.x * u_xlat7.x;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat3.xyz = u_xlat5.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * u_xlat10.xyz;
					    u_xlat18 = (-_Metallic) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = u_xlat19 * u_xlat19;
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat18 = u_xlat19 * u_xlat18;
					    u_xlat7.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x;
					    u_xlat1.x = u_xlat1.x * u_xlat4 + -0.5;
					    u_xlat18 = u_xlat1.x * u_xlat18 + 1.0;
					    u_xlat7.x = (-u_xlat20) + 1.0;
					    u_xlat13 = u_xlat7.x * u_xlat7.x;
					    u_xlat13 = u_xlat13 * u_xlat13;
					    u_xlat7.x = u_xlat7.x * u_xlat13;
					    u_xlat1.x = u_xlat1.x * u_xlat7.x + 1.0;
					    u_xlat18 = u_xlat18 * u_xlat1.x;
					    u_xlat18 = u_xlat20 * u_xlat18;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat3.xyz;
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "ShaderForgeMaterialInspector"
}